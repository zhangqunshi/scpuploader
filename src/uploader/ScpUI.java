package uploader;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import uploader.ScpUIlib;

/**
 *
 * @author zhangqunshi
 */
public class ScpUI extends javax.swing.JFrame {
    
    private Map<String, String> fileMapping = new HashMap<String, String>();
    private static final String SEPARATOR = " ==> ";

    /**
     * Creates new form ScpUI
     */
    public ScpUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uploadButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pathMappingTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        sourceFileTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        remotePathTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        hostsTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        pwdTextField = new javax.swing.JPasswordField();
        exportButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        showCheckBox = new javax.swing.JCheckBox();
        resetButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SCP Uploader v1.3");

        uploadButton.setMnemonic('r');
        uploadButton.setText("开始上传 (Alt+R)");
        uploadButton.setActionCommand("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        closeButton.setText("关闭退出");
        closeButton.setActionCommand("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("远程主机IP列表");

        pathMappingTextArea.setEditable(false);
        pathMappingTextArea.setColumns(20);
        pathMappingTextArea.setRows(5);
        jScrollPane2.setViewportView(pathMappingTextArea);

        jLabel2.setText("源文件");

        sourceFileTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sourceFileTextFieldFocusLost(evt);
            }
        });
        sourceFileTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sourceFileTextFieldKeyTyped(evt);
            }
        });

        browseButton.setText("浏览源文件");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("远程路径");

        remotePathTextField.setToolTipText("如果在unix环境，请使用反斜线。另外不带文件名，只是目录名");
        remotePathTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                remotePathTextFieldFocusLost(evt);
            }
        });

        hostsTextArea.setColumns(20);
        hostsTextArea.setRows(5);
        hostsTextArea.setToolTipText("每个IP地址独占一行");
        jScrollPane1.setViewportView(hostsTextArea);

        jLabel4.setText("用户名");

        usernameTextField.setText("");

        passwordLabel.setText("密码");

        addButton.setMnemonic('a');
        addButton.setText("添加 (Alt+A)");
        addButton.setToolTipText("文件上传对应关系填到下表中");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        pwdTextField.setText("");

        exportButton.setText("导出当前方案");
        exportButton.setActionCommand("ExportSchema");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        loadButton.setText("导入方案");
        loadButton.setActionCommand("ImportSchema");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        showCheckBox.setText("显示");
        showCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCheckBoxActionPerformed(evt);
            }
        });

        resetButton.setText("全部清空");
        resetButton.setActionCommand("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jButton1.setText("清空");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("远程主机登陆信息");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(exportButton)
                                .addGap(33, 33, 33)
                                .addComponent(loadButton)
                                .addGap(72, 72, 72)
                                .addComponent(uploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(resetButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(passwordLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(pwdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showCheckBox)
                            .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceFileTextField)
                            .addComponent(remotePathTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filler2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(browseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2))
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(220, 220, 220))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(sourceFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(remotePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton))
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uploadButton)
                            .addComponent(closeButton)
                            .addComponent(exportButton)
                            .addComponent(loadButton)
                            .addComponent(resetButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordLabel)
                            .addComponent(pwdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showCheckBox))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // TODO add your handling code here:

        // Get all local file and remote path mapping.
//        String pathTextArea = pathMappingTextArea.getText();
//        Map<String, String> pathMap = new HashMap<String, String>();
//        try {
//            String[] lines = pathTextArea.split("\n");
//            for (int i = 0; i < lines.length; i++) {
//                System.out.println("=" + lines[i]);
//                if (lines[i].trim().equals("")) {
//                    continue;
//                }
//                if (lines[i].indexOf(SEPARATOR) == -1) {
//                    JOptionPane.showMessageDialog(rootPane, "The format of path mapping is not correct, you need use --> to combined them!", "Error", JOptionPane.INFORMATION_MESSAGE);
//                    return;
//                }
//                String[] line = lines[i].split(SEPARATOR);
//                File f = new File(line[0].trim());
//                if (!f.exists()) {
//                    JOptionPane.showMessageDialog(rootPane, "The file " + line[0] + " doesn't exist!", "Error", JOptionPane.INFORMATION_MESSAGE);
//                    return;
//                }
//                pathMap.put(line[0].trim(), line[1].trim());
//            }
//            if (pathMap.isEmpty()) {
//                JOptionPane.showMessageDialog(rootPane, "You must input at least one file", "Error", JOptionPane.INFORMATION_MESSAGE);
//                return;
//            }
//        } catch (Exception e) {
//            System.err.println("Error read path mapping: " + e.getMessage());
//            JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
        
        if (fileMapping.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "You must input at least one file", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
        }

        // Get remote host ips
        String hostsText = hostsTextArea.getText();
        List<String> hosts = new ArrayList<String>();
        try {
            String[] lines = hostsText.split("\n");
            for (int i = 0; i < lines.length; i++) {
                System.out.println("=" + lines[i]);
                if (lines[i].trim().equals("")) {
                    continue;
                }
                String ip = lines[i].trim();
                if (ip.length() > 15) {
                    JOptionPane.showMessageDialog(rootPane, "Host ip " + ip + " is not valid!", "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                hosts.add(ip);
            }
            if (hosts.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "You must input at least one host ip", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } catch (Exception e) {
            System.err.println("Error read host ips: " + e.getMessage());
            JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get user and pwd
        String usr = usernameTextField.getText();
        String pwd = new String(pwdTextField.getPassword());

        if (usr.trim().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please enter the username", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
//        if (pwd.trim().equals("")) {
//            JOptionPane.showMessageDialog(rootPane, "Please enter the password", "Error", JOptionPane.ERROR_MESSAGE);
//            return;
//        }

        // upload files to remote server
        for (int i = 0; i < hosts.size(); i++) {
            Iterator<String> it = fileMapping.keySet().iterator();
            while (it.hasNext()) {
                String localFile = it.next();
                String remotePath = fileMapping.get(localFile);
                String host = hosts.get(i);
                SCP scp = new SCP(host, usr, pwd);
                try {
                    scp.upload(localFile, remotePath);
                } catch (Exception e) {
                    String errMsg = "Fail to upload [" + localFile + "] to [" + host + "].\nError: " + e.getMessage();
                    JOptionPane.showMessageDialog(rootPane, errMsg, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        JOptionPane.showMessageDialog(rootPane, "Upload Finished!", "Success", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_uploadButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:

        String sourceFile = sourceFileTextField.getText();
        String remotePath = remotePathTextField.getText();
        if (sourceFile.trim().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please enter the source file!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (remotePath.trim().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please enter the remote Path!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int lastSlash = remotePath.lastIndexOf("/");
        if (lastSlash > 0) {
            String remoteFile = remotePath.substring(lastSlash);
            if (remoteFile.indexOf(".") > 0) {
                JOptionPane.showMessageDialog(rootPane, "Remote Path must be a directory!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        File srcFile = new File(sourceFile);
        if (!srcFile.exists()) {
            JOptionPane.showMessageDialog(rootPane, "The source file doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (fileMapping.containsKey(sourceFile)) {
            String old_remote = fileMapping.get(sourceFile);
            if (old_remote.equals(remotePath)) {
                JOptionPane.showMessageDialog(rootPane, "The file has already exist in the following table !", "Error", JOptionPane.ERROR_MESSAGE);
                sourceFileTextField.setText("");
                remotePathTextField.setText("");
                return;
            }
            //TODO if remote path is different, then ask the user if want to replace it.
        } else {
            fileMapping.put(sourceFile, remotePath);
        }
        
        //String pathes = pathMappingTextArea.getText();
        String content = ScpUIlib.format(fileMapping);

        //sb.append(sourceFile).append(SEPARATOR).append(remotePath).append("\n");
        pathMappingTextArea.setText(content);
        sourceFileTextField.setText("");
        remotePathTextField.setText("");
    }//GEN-LAST:event_addButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add your handling code here:
//        String pathes = pathMappingTextArea.getText();
        String hosts = hostsTextArea.getText();
        String user = usernameTextField.getText();
        char[] password = pwdTextField.getPassword();

        try {
            JFileChooser browse = new JFileChooser();
            int re = browse.showOpenDialog(rootPane);
            File f = null;
            if (re == JFileChooser.APPROVE_OPTION) {
                f = browse.getSelectedFile();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please select a file!");
                return;
            }
            f.createNewFile();
            String lineSeparator = System.getProperty("line.separator");
            FileWriter fw = new FileWriter(f);
            fw.write("---path---" + lineSeparator);
            fw.write(ScpUIlib.backup_format(fileMapping));
            fw.write(lineSeparator + "---hosts---" + lineSeparator);
            fw.write(hosts);
            fw.write(lineSeparator + "---user---" + lineSeparator);
            fw.write(user);
            fw.write(lineSeparator + "---pwd---" + lineSeparator);
            fw.write(password);
            fw.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error export: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        JOptionPane.showMessageDialog(rootPane, "Export Successful!");

    }//GEN-LAST:event_exportButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser browse = new JFileChooser();
            int re = browse.showOpenDialog(rootPane);
            File f = null;
            if (re == JFileChooser.APPROVE_OPTION) {
                f = browse.getSelectedFile();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please select a file!");
                return;
            }
            FileReader fr = new FileReader(f);

            char[] x = new char[1];
            StringBuilder sb = new StringBuilder();
            while ( fr.read(x) != -1) {
                sb.append(x);
            }

            fr.close();
            String lineSeparator = System.getProperty("line.separator");
            String[] lines = sb.toString().split(lineSeparator);

            String flag = null;
            StringBuilder pathsb = new StringBuilder();
            StringBuilder hostsb = new StringBuilder();
            StringBuilder usersb = new StringBuilder();
            StringBuilder passsb = new StringBuilder();

            for (int i = 0; i < lines.length; i++) {
                System.out.println("00-->" + lines[i]);
                if ("---path---".equals(lines[i])) {
                    flag = "path";
                    continue;
                } else if ("---hosts---".equals(lines[i])) {
                    flag = "hosts";
                    continue;
                } else if ("---user---".equals(lines[i])) {
                    flag = "user";
                    continue;
                } else if ("---pwd---".equals(lines[i])) {
                    flag = "pwd";
                    continue;
                } else {
                    lines[i] = lines[i].trim();
                    if ("".equals(lines[i])) {
                        continue;
                    }
                }
                if ("path".equals(flag)) {
                    pathsb.append(lines[i]);
                }
                if ("hosts".equals(flag)) {
                    hostsb.append(lines[i]);
                }
                if ("user".equals(flag)) {
                    usersb.append(lines[i]);
                }
                if ("pwd".equals(flag)) {
                    passsb.append(lines[i]);
                }
            }
            
            this.fileMapping = ScpUIlib.backup_parse(pathsb.toString(), rootPane);
            String content = ScpUIlib.format(fileMapping);

            pathMappingTextArea.setText(content);
            hostsTextArea.setText(hostsb.toString().trim());
            usernameTextField.setText(usersb.toString().trim());
            pwdTextField.setText(passsb.toString().trim());

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error export: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        JOptionPane.showMessageDialog(rootPane, "Load Successful!");
    }//GEN-LAST:event_loadButtonActionPerformed

    private void showCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCheckBoxActionPerformed
        // TODO add your handling code here:
        if (showCheckBox.isSelected()) {
            pwdTextField.setEchoChar((char) 0);
        } else {
            pwdTextField.setEchoChar('*');
        }
    }//GEN-LAST:event_showCheckBoxActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        String prev = sourceFileTextField.getText();
        try {
            JFileChooser browse = null;
            if (prev != null && !"".equals(prev.trim())) {
                File prevFile = new File(prev);
                if (prevFile.exists()) {
                    String prevPath = prevFile.getAbsolutePath();
                    browse = new JFileChooser(prevPath);
                }
            }
            if (browse == null) {
                browse = new JFileChooser();
            }
            browse.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int re = browse.showOpenDialog(rootPane);
            File f = null;
            if (re == JFileChooser.APPROVE_OPTION) {
                f = browse.getSelectedFile();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please select a file!");
                return;
            }
            
            String p = f.getAbsolutePath();
            sourceFileTextField.setText(p);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        pathMappingTextArea.setText("");
        //pwdTextField.setText("");
        remotePathTextField.setText("");
        sourceFileTextField.setText("");
        hostsTextArea.setText("");
        fileMapping.clear();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        pathMappingTextArea.setText("");
        fileMapping.clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sourceFileTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sourceFileTextFieldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_sourceFileTextFieldFocusLost

    private void remotePathTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_remotePathTextFieldFocusLost
        String remotePath = remotePathTextField.getText();
        if (remotePath != null && !"".equals(remotePath.trim())) {
            remotePath = remotePath.replace("\\", "/");
            remotePathTextField.setText(remotePath);
        }
    }//GEN-LAST:event_remotePathTextFieldFocusLost

    private void sourceFileTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sourceFileTextFieldKeyTyped
        // TODO add your handling code here:
        String src = sourceFileTextField.getText();
        if (src != null) {
            String SRC_DIR = "";
            int srcIdx = src.indexOf(SRC_DIR);
            if (srcIdx > 0) {
                src = src.substring(srcIdx + SRC_DIR.length());
            }

            String remotePath = src.replace("\\", "/");
            int lastSlash = remotePath.lastIndexOf("/");
            if (lastSlash > 0) {
                remotePath = remotePath.substring(0, lastSlash);
            }
            remotePathTextField.setText(remotePath);
        }
    }//GEN-LAST:event_sourceFileTextFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScpUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScpUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScpUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScpUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ScpUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton exportButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JTextArea hostsTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextArea pathMappingTextArea;
    private javax.swing.JPasswordField pwdTextField;
    private javax.swing.JTextField remotePathTextField;
    private javax.swing.JButton resetButton;
    private javax.swing.JCheckBox showCheckBox;
    private javax.swing.JTextField sourceFileTextField;
    private javax.swing.JButton uploadButton;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
